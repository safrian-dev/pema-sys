{"version":3,"file":"static/js/6535.d32e3840.chunk.js","mappings":"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","sources":["pages/qrcode/QrCodeGenerator.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './QrCode.scss';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport { QRCode } from 'react-qrcode-logo';\r\nimport { toPng } from 'html-to-image';\r\nimport squaresPattern from '../../assets/images/qrcode/squares.jpg';\r\nimport fluidPattern from '../../assets/images/qrcode/fluid.jpg';\r\nimport dotsPattern from '../../assets/images/qrcode/dots.jpg';\r\nimport logo from '../../assets/images/qrcode/qr-code-logo.png';\r\n\r\nconst QrCodeGenerator = () => {\r\n  const [logoIsChecked, setLogoIsChecked] = useState(false);\r\n  const [selectedPattern, setSelectedPattern] = useState('squares');\r\n  const [eyeRadius, setEyeRadius] = useState(false);\r\n  const [selectedColor, setSelectedColor] = useState('#0f0f0f');\r\n  const [urlValue, setUrlValue] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  const elementRef = useRef(null);\r\n\r\n  const htmlToImageConvert = () => {\r\n    if (urlValue !== '') {\r\n      toPng(elementRef.current, { cacheBust: false }).then((dataUrl) => {\r\n        const link = document.createElement('a');\r\n        link.download = 'pemasys-qrcode.png';\r\n        link.href = dataUrl;\r\n        link.click();\r\n      });\r\n      setError(false);\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (urlValue !== '') {\r\n      setError(false);\r\n    }\r\n  }, [urlValue]);\r\n\r\n  return (\r\n    <div className=\"qr-container\">\r\n      <div className=\"qr-body\">\r\n        <div className=\"qr-left\">\r\n          <div className=\"frame\" ref={elementRef} style={{ border: `2px solid ${selectedColor}` }}>\r\n            <QRCode\r\n              value={urlValue}\r\n              size={300}\r\n              qrStyle={selectedPattern}\r\n              eyeRadius={eyeRadius ? 10 : 0}\r\n              fgColor={selectedColor}\r\n              quietZone={5}\r\n              logoImage={logoIsChecked ? logo : ''}\r\n            />\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type Url..\"\r\n            onChange={(e) => setUrlValue(e.target.value)}\r\n          />\r\n          <div className=\"text-center\">\r\n            {error ? <span style={{ color: 'red' }}>Please enter url!</span> : <span> </span>}\r\n          </div>\r\n        </div>\r\n        <div className=\"qr-right\">\r\n          <div className=\"pattern\">\r\n            <span>Pattern</span>\r\n            <div className=\"pattern-item\">\r\n              <div onClick={() => setSelectedPattern('squares')}>\r\n                {selectedPattern === 'squares' && (\r\n                  <div className=\"checked-mark\">\r\n                    <MaterialIcon icon=\"check\" />\r\n                  </div>\r\n                )}\r\n                <img src={squaresPattern} alt=\"squares\" width=\"60\" height=\"60\" />\r\n              </div>\r\n              <div onClick={() => setSelectedPattern('fluid')}>\r\n                {selectedPattern === 'fluid' && (\r\n                  <div className=\"checked-mark\">\r\n                    <MaterialIcon icon=\"check\" />\r\n                  </div>\r\n                )}\r\n                <img src={fluidPattern} alt=\"squares\" width=\"60\" height=\"60\" />\r\n              </div>\r\n              <div onClick={() => setSelectedPattern('dots')}>\r\n                {selectedPattern === 'dots' && (\r\n                  <div className=\"checked-mark\">\r\n                    <MaterialIcon icon=\"check\" />\r\n                  </div>\r\n                )}\r\n                <img src={dotsPattern} alt=\"squares\" width=\"60\" height=\"60\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"pattern\">\r\n            <span>Color</span>\r\n            <div className=\"pattern-item\">\r\n              <div onClick={() => setSelectedColor('#0f0f0f')} className=\"color-1\">\r\n                {selectedColor === '#0f0f0f' && (\r\n                  <div className=\"checked-mark\">\r\n                    <MaterialIcon icon=\"check\" />\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div onClick={() => setSelectedColor('#0c69c7')} className=\"color-2\">\r\n                {selectedColor === '#0c69c7' && (\r\n                  <div className=\"checked-mark\">\r\n                    <MaterialIcon icon=\"check\" />\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div onClick={() => setSelectedColor('#5DCF8B')} className=\"color-3\">\r\n                {selectedColor === '#5DCF8B' && (\r\n                  <div className=\"checked-mark\">\r\n                    <MaterialIcon icon=\"check\" />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"qr-radio\" onClick={() => setLogoIsChecked(!logoIsChecked)}>\r\n            <div className={`logo-check ${logoIsChecked && 'isChecked'}`}>\r\n              {logoIsChecked && <MaterialIcon icon=\"check\" />}\r\n            </div>\r\n            <span>Logo Pema</span>\r\n          </div>\r\n          <div className=\"qr-radio\" onClick={() => setEyeRadius(!eyeRadius)}>\r\n            <div className={`logo-check ${eyeRadius && 'isChecked'}`}>\r\n              {eyeRadius && <MaterialIcon icon=\"check\" />}\r\n            </div>\r\n            <span>Eye Radius</span>\r\n          </div>\r\n          <div className=\"btn-download\">\r\n            <button type=\"button\" onClick={htmlToImageConvert}>\r\n              Download Qr Code\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QrCodeGenerator;\r\n"],"names":["QrCodeGenerator","logoIsChecked","setLogoIsChecked","useState","selectedPattern","setSelectedPattern","eyeRadius","setEyeRadius","selectedColor","setSelectedColor","urlValue","setUrlValue","error","setError","elementRef","useRef","useEffect","_jsx","className","children","_jsxs","ref","style","border","concat","QRCode","value","size","qrStyle","fgColor","quietZone","logoImage","logo","type","placeholder","onChange","e","target","color","onClick","MaterialIcon","icon","src","squaresPattern","alt","width","height","fluidPattern","dotsPattern","htmlToImageConvert","toPng","current","cacheBust","then","dataUrl","link","document","createElement","download","href","click"],"sourceRoot":""}