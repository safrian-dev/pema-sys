{"version":3,"file":"static/js/8630.ea44724f.chunk.js","mappings":"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","sources":["layouts/breadcrumbs/BreadCrumbs.js","pages/vendor/CompanyList.js","pages/vendor/Company.js","../node_modules/reactstrap/esm/Breadcrumb.js","../node_modules/reactstrap/esm/BreadcrumbItem.js","../node_modules/@tanstack/query-core/src/queriesObserver.ts","../node_modules/@tanstack/react-query/src/useQueries.ts"],"sourcesContent":["import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = () => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  return (\r\n    <>\r\n      <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n","import React, { useEffect, useState } from 'react';\r\n// import MaterialIcon from '@material/react-material-icon';\r\nimport PropTypes from 'prop-types';\r\nimport DataTable from 'react-data-table-component';\r\n\r\nimport { Card, CardBody, Input, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CompanyList = ({ companies }) => {\r\n  const [search, setSearch] = useState('');\r\n  const [filter, setFilter] = useState([]);\r\n\r\n  const columns = [\r\n    {\r\n      name: 'Company Name',\r\n      selector: (row) => `${row.bentuk_usaha} ${row.nama_perusahaan}`,\r\n    },\r\n    {\r\n      name: 'Company Email',\r\n      selector: (row) => row.email,\r\n    },\r\n    {\r\n      name: 'Type of Business',\r\n      selector: (row) => row.tipe || '-',\r\n    },\r\n    {\r\n      name: 'Address',\r\n      selector: (row) => row.alamat || '-',\r\n    },\r\n    {\r\n      name: 'Status',\r\n      selector: (row) => row.status_verifikasi,\r\n    },\r\n    {\r\n      name: 'Phone Number',\r\n      selector: (row) => row.telepon || '-',\r\n    },\r\n    {\r\n      name: 'Action',\r\n      selector: (row) => (\r\n        <Link to={`/vendor/requests/check/${row.id}`}>\r\n          <Button size=\"sm\" color=\"dark\">\r\n            Detail\r\n          </Button>\r\n        </Link>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleChange = ({ selectedRows }) => {\r\n    console.log(selectedRows);\r\n  };\r\n\r\n  const viewAs = (e) => {\r\n    if (e.target.value === 'all') {\r\n      setFilter(companies);\r\n    } else {\r\n      setFilter(companies.filter((p) => p.status_verifikasi === e.target.value));\r\n    }\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFilter(companies);\r\n  }, [companies]);\r\n\r\n  useEffect(() => {\r\n    const result = companies?.filter((p) =>\r\n      p.nama_perusahaan.toLocaleLowerCase().match(search.toLocaleLowerCase()),\r\n    );\r\n    setFilter(result);\r\n  }, [search]);\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <DataTable\r\n            columns={columns}\r\n            data={filter}\r\n            pagination\r\n            selectableRows\r\n            onSelectedRowsChange={handleChange}\r\n            subHeader\r\n            subHeaderComponent={\r\n              <div className=\"d-flex justify-content-between w-100\">\r\n                <div>\r\n                  <Button color=\"danger\" size=\"sm\">\r\n                    <i className=\"bi bi-trash3\"></i> Delete\r\n                  </Button>{' '}\r\n                  <Button color=\"success\" size=\"sm\">\r\n                    <i className=\"bi bi-cloud-arrow-down\"></i> Export\r\n                  </Button>\r\n                </div>\r\n                <div>\r\n                  <Input bsSize=\"sm\" type=\"select\" onChange={(e) => viewAs(e)}>\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"register\">Register</option>\r\n                    <option value=\"review\">Review</option>\r\n                    <option value=\"terverifikasi\">Terverifikasi</option>\r\n                    <option value=\"revisi\">Revisi</option>\r\n                  </Input>\r\n                </div>\r\n                <Input\r\n                  bsSize=\"sm\"\r\n                  type=\"text\"\r\n                  value={search}\r\n                  placeholder=\"search . . . . \"\r\n                  className=\"w-25\"\r\n                  onChange={(e) => setSearch(e.target.value)}\r\n                />\r\n              </div>\r\n            }\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nCompanyList.propTypes = {\r\n  companies: PropTypes.array,\r\n};\r\nexport default CompanyList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useQueries } from '@tanstack/react-query';\r\nimport useAxios from '../../hooks/useAxios';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport CompanyList from './CompanyList';\r\n\r\nconst Company = () => {\r\n  const [companies, setCompanies] = useState();\r\n  const api = useAxios();\r\n  const result = useQueries({\r\n    queries: [\r\n      {\r\n        queryKey: ['company-list', 0],\r\n        queryFn: () =>\r\n          api.get(`dapi/vendor/company`).then((res) => {\r\n            return res.data.data;\r\n          }),\r\n      },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    setCompanies(result[0].data);\r\n  }, [result[0].data]);\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumbs />\r\n      <CompanyList {...{companies}}/>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Company;\r\n","var _excluded = [\"className\", \"listClassName\", \"cssModule\", \"children\", \"tag\", \"listTag\", \"aria-label\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  /** Aria label */\n  'aria-label': PropTypes.string,\n  /** Pass children so this component can wrap them */\n  children: PropTypes.node,\n  /** Add custom class */\n  className: PropTypes.string,\n  /** Change existing className with a new className */\n  cssModule: PropTypes.object,\n  /** Add custom class to list tag */\n  listClassName: PropTypes.string,\n  /** Set a custom element for list tag */\n  listTag: tagPropType,\n  /** Set a custom element for this component */\n  tag: tagPropType\n};\nfunction Breadcrumb(props) {\n  var className = props.className,\n    listClassName = props.listClassName,\n    cssModule = props.cssModule,\n    children = props.children,\n    _props$tag = props.tag,\n    Tag = _props$tag === void 0 ? 'nav' : _props$tag,\n    _props$listTag = props.listTag,\n    ListTag = _props$listTag === void 0 ? 'ol' : _props$listTag,\n    _props$ariaLabel = props['aria-label'],\n    label = _props$ariaLabel === void 0 ? 'breadcrumb' : _props$ariaLabel,\n    attributes = _objectWithoutProperties(props, _excluded);\n  var classes = mapToCssModules(classNames(className), cssModule);\n  var listClasses = mapToCssModules(classNames('breadcrumb', listClassName), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-label\": label\n  }), /*#__PURE__*/React.createElement(ListTag, {\n    className: listClasses\n  }, children));\n}\nBreadcrumb.propTypes = propTypes;\nexport default Breadcrumb;","var _excluded = [\"className\", \"cssModule\", \"active\", \"tag\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  /** Adds a visual \"active\" state to a Breadcrumb Item */\n  active: PropTypes.bool,\n  /** Add custom class to the element */\n  className: PropTypes.string,\n  /** Change existing className with a new className */\n  cssModule: PropTypes.object,\n  /** Set a custom element for this component */\n  tag: tagPropType\n};\nfunction BreadcrumbItem(props) {\n  var className = props.className,\n    cssModule = props.cssModule,\n    active = props.active,\n    _props$tag = props.tag,\n    Tag = _props$tag === void 0 ? 'li' : _props$tag,\n    attributes = _objectWithoutProperties(props, _excluded);\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, 'breadcrumb-item'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-current\": active ? 'page' : undefined\n  }));\n}\nBreadcrumbItem.propTypes = propTypes;\nexport default BreadcrumbItem;","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const matchingObserversSet = new Set(\n      matchingObservers.map((match) => match.observer),\n    )\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) => !matchingObserversSet.has(prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","'use client'\nimport * as React from 'react'\n\nimport { QueriesObserver, notifyManager } from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureStaleTime,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type { UseQueryOptions, UseQueryResult } from './types'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureStaleTime(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const optimisticResult = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result, isRestoring),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const options = defaultedQueries[index]\n        const queryObserver = observer.getObservers()[index]\n\n        if (options && queryObserver) {\n          if (shouldSuspend(options, result, isRestoring)) {\n            return fetchOptimistic(options, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(options, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const observerQueries = observer.getQueries()\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) =>\n      getHasError({\n        result,\n        errorResetBoundary,\n        useErrorBoundary: defaultedQueries[index]?.useErrorBoundary ?? false,\n        query: observerQueries[index]!,\n      }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return optimisticResult as QueriesResults<T>\n}\n"],"names":["BreadCrumbs","location","useLocation","firstUrl","pathname","split","secondUrl","_jsxs","_Fragment","children","_jsx","className","concat","Breadcrumb","BreadcrumbItem","to","tag","Link","active","_ref","companies","search","setSearch","useState","filter","setFilter","columns","name","selector","row","bentuk_usaha","nama_perusahaan","email","tipe","alamat","status_verifikasi","telepon","id","Button","size","color","useEffect","result","p","toLocaleLowerCase","match","Card","CardBody","DataTable","data","pagination","selectableRows","onSelectedRowsChange","_ref2","selectedRows","console","log","subHeader","subHeaderComponent","Input","bsSize","type","onChange","e","target","value","viewAs","placeholder","Company","setCompanies","api","useAxios","useQueries","queries","queryKey","queryFn","get","then","res","CompanyList","_excluded","_extends","Object","assign","bind","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","propTypes","PropTypes","cssModule","listClassName","listTag","tagPropType","props","_props$tag","Tag","_props$listTag","ListTag","_props$ariaLabel","label","attributes","classes","mapToCssModules","classNames","listClasses","React","undefined","QueriesObserver","Subscribable","constructor","client","super","observers","observersMap","setQueries","onSubscribe","listeners","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","Set","notifyOptions","notifyManager","batch","prevObservers","newObserverMatches","findMatchingObservers","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","prevObserversMap","Map","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","matchedQueryHashes","unmatchedQueries","has","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","sort","sortMatchesByOrderOfQueries","a","b","replaceAt","listener","context","defaultedQueries","_optimisticResults","isRestoring","query","ensurePreventErrorBoundaryRetry","errorResetBoundary","queryClient","optimisticResult","useSyncExternalStore","onStoreChange","batchCalls","suspensePromises","queryObserver","fetchOptimistic","Promise","all","observerQueries","_defaultedQueries$ind","_defaultedQueries$ind2","getHasError","firstSingleResultWhichShouldThrow","error"],"sourceRoot":""}